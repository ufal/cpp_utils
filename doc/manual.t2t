UFAL C++ Utils
Version 3.4.2

= Introduction =

%!include: readme.t2t


= UFAL C++ Utils Files =

Most of the following files are used as headers only, with methods defined
``inline`` where possible.

For more detailed documentation, see the header files.


== binary_decoder.h ==

The ``binary_decoder`` class allows deserialization of data encoded using
``binary_encoder``.  The serialization is performed using a memory dump, so
only basic value types are supported.


== binary_encoder.h ==

The ``binary_encoder`` class allows serialization of data, which can be
deserialized using ``binary_decoder``.  The serialization is performed using
a memory dump, so only basic value types are supported.


== compressor.h ==

The ``compressor`` class allow uncompressing and compressing content of
``binary_decoder`` and ``binary_encoder``. LZMA compression is used.

To use ``compressor::load`` method, link the ``compressor_load.cpp`` file.
To use ``compressor::save`` method, link the ``compressor_save.cpp`` file.


== getpara.h ==

The ``getpara`` method loads whole paragraph from an ``istream``.


== getwhole.h ==

The ``getwhole`` method loads all content from an ``istream``.


== iostreams.h ==

The ``iostreams.h`` file contains methods for various initializations of C++
iostreams that should be called before any output is produced:
- ``iostreams_init``: switch off the synchronization with C stdio
- ``iostreams_init_binary_input``: change ``cin`` to binary mode
- ``iostreams_init_binary_output``: change ``cout`` to binary mode
-


== named_values.h ==

The ``named_values`` class allows parsing of several named values into
a map. The format of the named values is the following:
- the values are semicolon separated
- every value has ``name`` or ``name=value`` format
- the ``value`` can be encoded using one of the following:
  - ``file:file_name``: content of the given file name
  - ``data:length:value``: the value is exactly ``length`` bytes and can include a semicolon
  - ``value``: semicolon-separated value
-


== new_unique_ptr.h ==

The ``new_unique_ptr`` method creates a new instance of ``unique_ptr<T>``,
forwarding all its argument to ``T`` constructor.


== options.h ==

The ``options`` class allow parsing options. For option can take either
no value, any value, or a specific set of values.

To use the ``options`` class, link ``options.cpp`` file.

== parse_double.h ==

The ``parse_double`` methods parse a double.


== parse_int.h ==

The ``parse_int`` methods parse a int.


== pointer_decoder.h ==

The ``pointer_decoder`` class has the same deserializing functionality
as the ``binary_decoder`` class, but deserializes non-owning data.


== process_args.h ==

Using ``process_args`` and ``process_args_with_output_template`` methods, the
given ``processor`` is called on all specified input and output files.
The two methods differ in how they derive the name of the output file.
- ``process_args``: The output file has to be specified after colon, for every
  input file separately.
- ``process_args_with_output_template``: The output file name is generated
  using output template. The output template can contain ``{}``, which is
  replaced by the base name of the input file (without directories and
  extension).
-


== run_process.h ==

The ``run_process`` method executed the given command with given arguments, and
optionally captured standard output of the command.

The API also offers the possibility of providing standard input and/or
capturing standard error output, but that functionality is currently not implemented.


== split.h ==

The ``split`` methods can split ``string`` or ``string_piece`` to a vector
of tokens delimited by a specified delimiter character.


== string_piece.h ==

The ``string_piece`` structure holds a non-owning reference to a string
of specified length.


== threadsafe_resource_loader.h ==

The ``threadsafe_resource_loader`` class implements a resource loader for
resources providing ``load`` and ``release`` methods. The resource loader
provides thread-safe implementations of ``load`` and ``release`` methods,
limiting the number of concurrently loaded resources to a given bound.


== threadsafe_stack.h ==

The ``threadsafe_stack`` class implements a simple stack with ``push`` and
``pop`` methods, which are thread-safe and implemented using lock-free
operations.


== unaligned_access.h ==

The ``unaligned_access.h`` header provides several methods for loading
and storing values using unaligned pointers.

Provided are the following methods:
- ``unaligned_load``: unaligned load
- ``unaligned_load_inc``: unaligned load and increment
- ``unaligned_store``: unaligned store
- ``unaligned_store_inc``: unaligned store and increment
- ``unaligned_lower_bound``, ``unaligned_upper_bound``: analogues
  of ``std::{lower,upper}_bound`` methods
-


== url_detector.h ==

The ``url_detector`` class allow recognizing URLs and emails. Either the whole
given string must match, or only its prefix.

To use the ``url_detector`` class, link ``url_detector.cpp`` file.


== xml_encoded.h ==

Using the ``xml_encoded`` class, content of a string_piece can be appended
to an ostream, while encoding ``<>&`` and optionally ``"`` using XML entities.


